{"ast":null,"code":"import _slicedToArray from \"C:\\\\Users\\\\PC\\\\Documents\\\\GitHub\\\\web603w7d1\\\\react-vertex-sphere-of-spheres\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\PC\\\\Documents\\\\GitHub\\\\web603w7d1\\\\react-vertex-sphere-of-spheres\\\\src\\\\Spheres.js\";\nimport React, { useMemo } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { useTexture2d } from \"@react-vertex/core\";\nimport { usePhongTextured } from \"@react-vertex/material-hooks\";\nimport { useSphereElements } from \"@react-vertex/geometry-hooks\";\nimport tiles from \"./abstract.jpg\";\nfunction Spheres(_ref) {\n  var _this = this;\n  var layoutRadius = _ref.layoutRadius,\n    sphereCount = _ref.sphereCount,\n    sphereRadius = _ref.sphereRadius;\n  var _useTexture2d = useTexture2d(tiles),\n    _useTexture2d2 = _slicedToArray(_useTexture2d, 1),\n    texture = _useTexture2d2[0];\n  var program = usePhongTextured(texture, 0.1);\n  var sphere = useSphereElements(sphereRadius, 20, 20);\n  var positions = useMemo(function () {\n    var result = [];\n    for (var i = 0; i < sphereCount; i++) {\n      var a = Math.acos(-1 + 2 * i / sphereCount);\n      var b = Math.sqrt((sphereCount - 1) * Math.PI) * a;\n      result.push([layoutRadius * Math.cos(b) * Math.sin(a), layoutRadius * Math.sin(b) * Math.sin(a), layoutRadius * Math.cos(a)]);\n    }\n    return result;\n  }, [sphereCount, layoutRadius]);\n  return /*#__PURE__*/React.createElement(\"material\", {\n    program: program,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 5\n    }\n  }, positions.map(function (position, idx) {\n    return /*#__PURE__*/React.createElement(\"geometry\", Object.assign({\n      key: idx,\n      position: position\n    }, sphere, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 9\n      }\n    }));\n  }));\n}\nSpheres.propTypes = {\n  sphereCount: PropTypes.number.isRequired,\n  sphereRadius: PropTypes.number.isRequired,\n  layoutRadius: PropTypes.number.isRequired\n};\nexport default Spheres;","map":{"version":3,"names":["React","useMemo","PropTypes","useTexture2d","usePhongTextured","useSphereElements","tiles","Spheres","_ref","_this","layoutRadius","sphereCount","sphereRadius","_useTexture2d","_useTexture2d2","_slicedToArray","texture","program","sphere","positions","result","i","a","Math","acos","b","sqrt","PI","push","cos","sin","createElement","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","map","position","idx","Object","assign","key","propTypes","number","isRequired"],"sources":["C:/Users/PC/Documents/GitHub/web603w7d1/react-vertex-sphere-of-spheres/src/Spheres.js"],"sourcesContent":["import React, { useMemo } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { useTexture2d } from \"@react-vertex/core\";\nimport { usePhongTextured } from \"@react-vertex/material-hooks\";\nimport { useSphereElements } from \"@react-vertex/geometry-hooks\";\nimport tiles from \"./abstract.jpg\";\n\nfunction Spheres({ layoutRadius, sphereCount, sphereRadius }) {\n  const [texture] = useTexture2d(tiles);\n  const program = usePhongTextured(texture, 0.1);\n  const sphere = useSphereElements(sphereRadius, 20, 20);\n\n  const positions = useMemo(() => {\n    const result = [];\n\n    for (let i = 0; i < sphereCount; i++) {\n      const a = Math.acos(-1 + (2 * i) / sphereCount);\n      const b = Math.sqrt((sphereCount - 1) * Math.PI) * a;\n\n      result.push([\n        layoutRadius * Math.cos(b) * Math.sin(a),\n        layoutRadius * Math.sin(b) * Math.sin(a),\n        layoutRadius * Math.cos(a)\n      ]);\n    }\n\n    return result;\n  }, [sphereCount, layoutRadius]);\n\n  return (\n    <material program={program}>\n      {positions.map((position, idx) => (\n        <geometry key={idx} position={position} {...sphere} />\n      ))}\n    </material>\n  );\n}\n\nSpheres.propTypes = {\n  sphereCount: PropTypes.number.isRequired,\n  sphereRadius: PropTypes.number.isRequired,\n  layoutRadius: PropTypes.number.isRequired\n};\n\nexport default Spheres;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,OAAO,QAAQ,OAAO;AACtC,OAAOC,SAAS,MAAM,YAAY;AAClC,SAASC,YAAY,QAAQ,oBAAoB;AACjD,SAASC,gBAAgB,QAAQ,8BAA8B;AAC/D,SAASC,iBAAiB,QAAQ,8BAA8B;AAChE,OAAOC,KAAK,MAAM,gBAAgB;AAElC,SAASC,OAAOA,CAAAC,IAAA,EAA8C;EAAA,IAAAC,KAAA;EAAA,IAA3CC,YAAY,GAAAF,IAAA,CAAZE,YAAY;IAAEC,WAAW,GAAAH,IAAA,CAAXG,WAAW;IAAEC,YAAY,GAAAJ,IAAA,CAAZI,YAAY;EAAA,IAAAC,aAAA,GACtCV,YAAY,CAACG,KAAK,CAAC;IAAAQ,cAAA,GAAAC,cAAA,CAAAF,aAAA;IAA9BG,OAAO,GAAAF,cAAA;EACd,IAAMG,OAAO,GAAGb,gBAAgB,CAACY,OAAO,EAAE,GAAG,CAAC;EAC9C,IAAME,MAAM,GAAGb,iBAAiB,CAACO,YAAY,EAAE,EAAE,EAAE,EAAE,CAAC;EAEtD,IAAMO,SAAS,GAAGlB,OAAO,CAAC,YAAM;IAC9B,IAAMmB,MAAM,GAAG,EAAE;IAEjB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGV,WAAW,EAAEU,CAAC,EAAE,EAAE;MACpC,IAAMC,CAAC,GAAGC,IAAI,CAACC,IAAI,CAAC,CAAC,CAAC,GAAI,CAAC,GAAGH,CAAC,GAAIV,WAAW,CAAC;MAC/C,IAAMc,CAAC,GAAGF,IAAI,CAACG,IAAI,CAAC,CAACf,WAAW,GAAG,CAAC,IAAIY,IAAI,CAACI,EAAE,CAAC,GAAGL,CAAC;MAEpDF,MAAM,CAACQ,IAAI,CAAC,CACVlB,YAAY,GAAGa,IAAI,CAACM,GAAG,CAACJ,CAAC,CAAC,GAAGF,IAAI,CAACO,GAAG,CAACR,CAAC,CAAC,EACxCZ,YAAY,GAAGa,IAAI,CAACO,GAAG,CAACL,CAAC,CAAC,GAAGF,IAAI,CAACO,GAAG,CAACR,CAAC,CAAC,EACxCZ,YAAY,GAAGa,IAAI,CAACM,GAAG,CAACP,CAAC,CAAC,CAC3B,CAAC;IACJ;IAEA,OAAOF,MAAM;EACf,CAAC,EAAE,CAACT,WAAW,EAAED,YAAY,CAAC,CAAC;EAE/B,oBACEV,KAAA,CAAA+B,aAAA;IAAUd,OAAO,EAAEA,OAAQ;IAAAe,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GACxBlB,SAAS,CAACmB,GAAG,CAAC,UAACC,QAAQ,EAAEC,GAAG;IAAA,oBAC3BxC,KAAA,CAAA+B,aAAA,aAAAU,MAAA,CAAAC,MAAA;MAAUC,GAAG,EAAEH,GAAI;MAACD,QAAQ,EAAEA;IAAS,GAAKrB,MAAM;MAAAc,MAAA,EAAAvB,KAAA;MAAAwB,QAAA;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA;IAAA,EAAG,CAAC;EAAA,CACvD,CACO,CAAC;AAEf;AAEA9B,OAAO,CAACqC,SAAS,GAAG;EAClBjC,WAAW,EAAET,SAAS,CAAC2C,MAAM,CAACC,UAAU;EACxClC,YAAY,EAAEV,SAAS,CAAC2C,MAAM,CAACC,UAAU;EACzCpC,YAAY,EAAER,SAAS,CAAC2C,MAAM,CAACC;AACjC,CAAC;AAED,eAAevC,OAAO"},"metadata":{},"sourceType":"module"}